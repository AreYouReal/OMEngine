GL_VERTEX_SHADER

#version 300 es
struct Light{
    lowp vec3 position;
    lowp vec4 color;
};

uniform mat4 uModelViewM;
uniform mat4 uProjectionM;
uniform lowp mat3 uNormalM;
uniform Light uLight;

layout(location = 0) in vec4 aPosition;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec3 aTexCoord;
layout(location = 3) in vec3 aTangent;

out vec3 texCoord;
out vec3 position;
out vec3 lightDirectionTS;
out vec4 lightColor;

void firstOption(){
    vec3 tmp;
    lowp vec3 normal    = vec3(uNormalM * aNormal);
    lowp vec3 tangent   = vec3(uNormalM * aTangent);
    lowp vec3 binormal  = cross(normal, tangent);
    
    position = vec3(uModelViewM * aPosition);
    gl_Position = uProjectionM * vec4(position, 1.0);
    
    lowp vec3 lightDirectionES = normalize(uLight.position - position);
    
    lightDirectionTS.x = dot(lightDirectionES, tangent);
    lightDirectionTS.y = dot(lightDirectionES, binormal);
    lightDirectionTS.z = dot(lightDirectionES, normal);
    
    tmp.x = dot(position, tangent);
    tmp.y = dot(position, binormal);
    tmp.z = dot(position, normal);
    position = -normalize(tmp);
    
    texCoord = aTexCoord;
    lightColor = uLight.color;
}

void secondOption(){
    texCoord = aTexCoord;

    lowp mat3 tbn;

    tbn[2] = normalize(uNormalM * aNormal);
    tbn[0] = normalize(uNormalM * aTangent);
    tbn[1] = cross(tbn[2], tbn[0]);
    
    position = vec3(uModelViewM * aPosition);
    
    gl_Position = uProjectionM * vec4(position, 1.0);
    
    position = -normalize(position * tbn);
    
    lightDirectionTS = tbn[0];
    lightColor = uLight.color;
}


void main(){
    firstOption();
}


GL_FRAGMENT_SHADER

#version 300 es
precision mediump float;

struct Material{
    lowp vec4       ambient;
    lowp vec4       diffuse;
    lowp vec4       specular;
    mediump float   shininess;
};

uniform Material uMaterial;

uniform mediump sampler2D uSamplerDiffuse;
uniform mediump sampler2D uSamplerBump;

in lowp vec3 texCoord;
in lowp vec3 position;
in lowp vec3 lightDirectionTS;
in lowp vec4 lightColor;

out vec4 fragColor;

vec4 directionalLight(in vec4 color, in vec3 direction){
    vec4 finalColor;
    lowp vec3 normal = texture(uSamplerBump, texCoord.xy).rgb * 2.0 - 1.0;
    lowp float ndotl = max( dot( normal, direction), 0.0 );
    if(ndotl > 0.0){
        lowp float ndoth = max(dot(normal, normalize(direction + position)), 0.0);
        finalColor += uMaterial.diffuse * color * ndotl;
        finalColor += uMaterial.specular * color * pow(ndoth, uMaterial.shininess);
    }
    return finalColor;
}

void main(){
    lowp vec4 finalColor = uMaterial.ambient;
    finalColor += directionalLight(lightColor, lightDirectionTS);
    fragColor = texture(uSamplerDiffuse, texCoord.xy) * finalColor;
}